#ifndef __BYTES64_DEBUG_H__
#define __BYTES64_DEBUG_H__

#include "header.h"

#define BYTES64(    \
    VALUE15, VALUE14, VALUE13, VALUE12, VALUE11, VALUE10, VALUE9, VALUE8,  \
    VALUE7, VALUE6, VALUE5, VALUE4, VALUE3, VALUE2, VALUE1, VALUE0  \
)   \
    (bytes64_t){{   \
        VALUE0, VALUE1, VALUE2, VALUE3, VALUE4, VALUE5, VALUE6, VALUE7, \
        VALUE8, VALUE9, VALUE10, VALUE11, VALUE12, VALUE13, VALUE14, VALUE15    \
    }}

#define BYTES64_UINT(UINT) BYTES64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, DECH(UINT), DECL(UINT))

#define ASSERT_BYTES64_MUTUAL(BYTES1, BYTES2) \
    assert(memcmp(BYTES1.v, BYTES2.v, 64) == 0)

#define ASSERT_BYTES64(BYTES, \
    VALUE15, VALUE14, VALUE13, VALUE12, VALUE11, VALUE10, VALUE9, VALUE8,  \
    VALUE7, VALUE6, VALUE5, VALUE4, VALUE3, VALUE2, VALUE1, VALUE0 \
) \
{ \
    bytes64_t bd_exp; \
    bd_exp = BYTES64( \
        VALUE15, VALUE14, VALUE13, VALUE12, VALUE11, VALUE10, VALUE9, VALUE8,  \
        VALUE7, VALUE6, VALUE5, VALUE4, VALUE3, VALUE2, VALUE1, VALUE0 \
    ); \
    ASSERT_BYTES64_MUTUAL(BYTES, bd_exp); \
}

#define ASSERT_BYTES64_UINT(BYTES, UINT) \
{ \
    bytes64_t bd_exp; \
    bd_exp = BYTES64_UINT(UINT); \
    ASSERT_BYTES64_MUTUAL(BYTES, bd_exp); \
}

void bytes64_display(bytes64_t bd);

bytes64_t bytes64_bytes32(bytes32_t b);

#endif